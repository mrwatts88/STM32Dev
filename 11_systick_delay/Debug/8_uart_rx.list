
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00001438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000440  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000440  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008ab  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000032c  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198dc  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000113e  00000000  00000000  0001ba45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebb0  00000000  00000000  0001cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  000ab778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ab8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000420 	.word	0x08000420

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000420 	.word	0x08000420

08000204 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init() {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// enable GPIOA clock for AHB1 BUS
	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <led_init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <led_init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	// set up PA5 for output mode
	GPIOA->MODER |= (1U << 10);
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <led_init+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <led_init+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <led_init+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	@ (800023c <led_init+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <main>:

void init(void);

char key;

int main(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	init();
 8000244:	f000 f820 	bl	8000288 <init>

	while (1) {
		key = uart2_read();
 8000248:	f000 f826 	bl	8000298 <uart2_read>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <main+0x40>)
 8000252:	701a      	strb	r2, [r3, #0]

		if (key == 'N') {
 8000254:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <main+0x40>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b4e      	cmp	r3, #78	@ 0x4e
 800025a:	d106      	bne.n	800026a <main+0x2a>
			GPIOA->ODR |= LED_PIN;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <main+0x44>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a08      	ldr	r2, [pc, #32]	@ (8000284 <main+0x44>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6153      	str	r3, [r2, #20]
 8000268:	e7ee      	b.n	8000248 <main+0x8>
		} else if (key == 'F') {
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <main+0x40>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b46      	cmp	r3, #70	@ 0x46
 8000270:	d1ea      	bne.n	8000248 <main+0x8>
			GPIOA->ODR &= ~LED_PIN;
 8000272:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <main+0x44>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a03      	ldr	r2, [pc, #12]	@ (8000284 <main+0x44>)
 8000278:	f023 0320 	bic.w	r3, r3, #32
 800027c:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800027e:	e7e3      	b.n	8000248 <main+0x8>
 8000280:	2000001c 	.word	0x2000001c
 8000284:	40020000 	.word	0x40020000

08000288 <init>:
		}
	}
}

void init(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	uart2_init();
 800028c:	f000 f82c 	bl	80002e8 <uart2_init>
	led_init();
 8000290:	f7ff ffb8 	bl	8000204 <led_init>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <uart2_read>:

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
}

char uart2_read(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// make sure transmit data register is empty
	while (!(USART2->SR & USART_SR_RXNE))
 800029c:	bf00      	nop
 800029e:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <uart2_read+0x24>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 0320 	and.w	r3, r3, #32
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <uart2_read+0x6>
		;

	// read from transmit data register
	return USART2->DR;
 80002aa:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <uart2_read+0x24>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	b2db      	uxtb	r3, r3
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40004400 	.word	0x40004400

080002c0 <compute_uart_BD>:

uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t BaudRate) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return (PeriphClk + BaudRate / 2U) / BaudRate;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	085a      	lsrs	r2, r3, #1
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	441a      	add	r2, r3
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d8:	b29b      	uxth	r3, r3
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <uart2_init>:

void uart2_init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	// configure RX/TX pins
	// 1. enable clock access to gpio A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002ec:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <uart2_init+0x8c>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	4a20      	ldr	r2, [pc, #128]	@ (8000374 <uart2_init+0x8c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6313      	str	r3, [r2, #48]	@ 0x30
	// 2. set pa2 mode to AF mode
	GPIOA->MODER &= ~(1U << 4);
 80002f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <uart2_init+0x90>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000378 <uart2_init+0x90>)
 80002fe:	f023 0310 	bic.w	r3, r3, #16
 8000302:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <uart2_init+0x90>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <uart2_init+0x90>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6013      	str	r3, [r2, #0]
	// 3. set pa2 alternate function type to AF07 (UART_TX)
	GPIOA->AFR[0] |= (7U << 8);
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <uart2_init+0x90>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a18      	ldr	r2, [pc, #96]	@ (8000378 <uart2_init+0x90>)
 8000316:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800031a:	6213      	str	r3, [r2, #32]
	// 4. set pa3 mode to AF mode
	GPIOA->MODER &= ~(1U << 6);
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <uart2_init+0x90>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a15      	ldr	r2, [pc, #84]	@ (8000378 <uart2_init+0x90>)
 8000322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <uart2_init+0x90>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a12      	ldr	r2, [pc, #72]	@ (8000378 <uart2_init+0x90>)
 800032e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000332:	6013      	str	r3, [r2, #0]
	// 5. set pa3 AF to AF07 (UART_RX)
	GPIOA->AFR[0] |= (7U << 12);
 8000334:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <uart2_init+0x90>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a0f      	ldr	r2, [pc, #60]	@ (8000378 <uart2_init+0x90>)
 800033a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800033e:	6213      	str	r3, [r2, #32]

	// configure USART module
	// 1. enable clock access to USART2 (APB1ENR)
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <uart2_init+0x8c>)
 8000342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000344:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <uart2_init+0x8c>)
 8000346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800034a:	6413      	str	r3, [r2, #64]	@ 0x40
	// 2. configure USART baudrate
	USART2->BRR = compute_uart_BD(APB1_CLK, UART_BAUDRATE);
 800034c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000350:	480a      	ldr	r0, [pc, #40]	@ (800037c <uart2_init+0x94>)
 8000352:	f7ff ffb5 	bl	80002c0 <compute_uart_BD>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <uart2_init+0x98>)
 800035c:	609a      	str	r2, [r3, #8]
	// 3. enable transmitter and receiver
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE);
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <uart2_init+0x98>)
 8000360:	220c      	movs	r2, #12
 8000362:	60da      	str	r2, [r3, #12]
	// 5. enable USART module
	USART2->CR1 |= USART_CR1_UE;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <uart2_init+0x98>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <uart2_init+0x98>)
 800036a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800036e:	60d3      	str	r3, [r2, #12]
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000
 800037c:	00f42400 	.word	0x00f42400
 8000380:	40004400 	.word	0x40004400

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	@ (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	@ (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	@ (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	@ (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	@ (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff43 	bl	8000240 <main>

080003ba <LoopForever>:

LoopForever:
  b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	20000020 	.word	0x20000020

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	@ (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	@ (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
