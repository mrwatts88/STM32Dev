
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001314  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014e4  080014e4  000024e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800152c  0800152c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001534  08001534  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001534  08001534  00002534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001538  08001538  00002538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800153c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001598  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001598  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001171  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e2  00000000  00000000  000041fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000047e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000109  00000000  00000000  00004968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a92b  00000000  00000000  00004a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f05  00000000  00000000  0001f39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d1d  00000000  00000000  000212a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c30  00000000  00000000  000b2004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b2c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080014cc 	.word	0x080014cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080014cc 	.word	0x080014cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <init_adc_pa1>:
#include "adc.h"
#include "stm32f4xx.h"

void init_adc_pa1(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	// datasheet: https://www.st.com/resource/en/datasheet/stm32f446mc.pdf

	// from the datasheet, Figure 3. STM32F446xC/E block diagram, ADC1 is on bus APB2
	// enable clock for APB2
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <init_adc_pa1+0x70>)
 80002b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002b8:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <init_adc_pa1+0x70>)
 80002ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002be:	6453      	str	r3, [r2, #68]	@ 0x44

	// 1st conversion in regular sequence = channel 1
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <init_adc_pa1+0x74>)
 80002c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002c4:	4a17      	ldr	r2, [pc, #92]	@ (8000324 <init_adc_pa1+0x74>)
 80002c6:	f023 031f 	bic.w	r3, r3, #31
 80002ca:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ1_0;
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <init_adc_pa1+0x74>)
 80002ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <init_adc_pa1+0x74>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6353      	str	r3, [r2, #52]	@ 0x34

	// Regular channel sequence length = 1
	ADC1->SQR1 &= ~ADC_SQR1_L_Msk;
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <init_adc_pa1+0x74>)
 80002da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <init_adc_pa1+0x74>)
 80002de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// enable ADC module
	ADC1->CR2 |= ADC_CR2_ADON;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <init_adc_pa1+0x74>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <init_adc_pa1+0x74>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6093      	str	r3, [r2, #8]

	// enable GPIOA clock for AHB1 BUS
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <init_adc_pa1+0x70>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <init_adc_pa1+0x70>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30

	// from the datasheet Table 10. STM32F446xx pin and ball descriptions
	// channel 1 (ADC123_IN1) is on pin PA1.
	// set up PA1 for analog mode
	GPIOA->MODER &= ~GPIO_MODER_MODER1_Msk;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <init_adc_pa1+0x78>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <init_adc_pa1+0x78>)
 8000302:	f023 030c 	bic.w	r3, r3, #12
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <init_adc_pa1+0x78>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <init_adc_pa1+0x78>)
 800030e:	f043 030c 	orr.w	r3, r3, #12
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40012000 	.word	0x40012000
 8000328:	40020000 	.word	0x40020000

0800032c <start_conversion>:

void start_conversion(void) {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	// Start Conversion of regular channels
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <start_conversion+0x1c>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <start_conversion+0x1c>)
 8000336:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800033a:	6093      	str	r3, [r2, #8]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40012000 	.word	0x40012000

0800034c <adc_read>:

uint32_t adc_read(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	// wait for conversion to be complete
	while (!(ADC1->SR & ADC_CSR_EOC1))
 8000350:	bf00      	nop
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <adc_read+0x20>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <adc_read+0x6>
		;

	// read converted value
	return ADC1->DR;
 800035e:	4b03      	ldr	r3, [pc, #12]	@ (800036c <adc_read+0x20>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40012000 	.word	0x40012000

08000370 <main>:

void init(void);

uint32_t sensor_value;

int main(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	init();
 8000374:	f000 f802 	bl	800037c <init>

	while (1) {
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <main+0x8>

0800037c <init>:

	}
}

void init(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	uart2_init_pa3();
 8000382:	f000 f8fd 	bl	8000580 <uart2_init_pa3>
	init_adc_pa1();
 8000386:	f7ff ff93 	bl	80002b0 <init_adc_pa1>


	while (1) {
		start_conversion();
 800038a:	f7ff ffcf 	bl	800032c <start_conversion>
		sensor_value = adc_read();
 800038e:	f7ff ffdd 	bl	800034c <adc_read>
 8000392:	4603      	mov	r3, r0
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <init+0x40>)
 8000396:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 100000; i++);
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e002      	b.n	80003a4 <init+0x28>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <init+0x44>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	ddf8      	ble.n	800039e <init+0x22>
		printf("Sensor value: %lu\r\n", sensor_value);
 80003ac:	4b03      	ldr	r3, [pc, #12]	@ (80003bc <init+0x40>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <init+0x48>)
 80003b4:	f000 fa1e 	bl	80007f4 <iprintf>
		start_conversion();
 80003b8:	e7e7      	b.n	800038a <init+0xe>
 80003ba:	bf00      	nop
 80003bc:	20000078 	.word	0x20000078
 80003c0:	0001869f 	.word	0x0001869f
 80003c4:	080014e4 	.word	0x080014e4

080003c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	e00a      	b.n	80003f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003da:	f3af 8000 	nop.w
 80003de:	4601      	mov	r1, r0
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	60ba      	str	r2, [r7, #8]
 80003e6:	b2ca      	uxtb	r2, r1
 80003e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	3301      	adds	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	697a      	ldr	r2, [r7, #20]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	dbf0      	blt.n	80003da <_read+0x12>
  }

  return len;
 80003f8:	687b      	ldr	r3, [r7, #4]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e009      	b.n	8000428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	60ba      	str	r2, [r7, #8]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f877 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3301      	adds	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	429a      	cmp	r2, r3
 800042e:	dbf1      	blt.n	8000414 <_write+0x12>
  }
  return len;
 8000430:	687b      	ldr	r3, [r7, #4]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_close>:

int _close(int file)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
 800045a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000462:	605a      	str	r2, [r3, #4]
  return 0;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ac:	4a14      	ldr	r2, [pc, #80]	@ (8000500 <_sbrk+0x5c>)
 80004ae:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <_sbrk+0x60>)
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <_sbrk+0x64>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	@ (800050c <_sbrk+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d207      	bcs.n	80004e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d4:	f000 f9a8 	bl	8000828 <__errno>
 80004d8:	4603      	mov	r3, r0
 80004da:	220c      	movs	r2, #12
 80004dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004e2:	e009      	b.n	80004f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <_sbrk+0x64>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ea:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <_sbrk+0x64>)
 80004f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20020000 	.word	0x20020000
 8000504:	00000400 	.word	0x00000400
 8000508:	2000007c 	.word	0x2000007c
 800050c:	200001d0 	.word	0x200001d0

08000510 <__io_putchar>:
#include "stm32f4xx.h"
#include "uart.h"

void uart2_write(int ch);

int __io_putchar(int ch) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f819 	bl	8000550 <uart2_write>
	return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <compute_uart_BD>:

uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t BaudRate) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	return (PeriphClk + BaudRate / 2U) / BaudRate;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	085a      	lsrs	r2, r3, #1
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	441a      	add	r2, r3
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	b29b      	uxth	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <uart2_write>:

void uart2_write(int ch) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	// make sure transmit data register is empty
	while (!(USART2->SR & USART_SR_TXE))
 8000558:	bf00      	nop
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <uart2_write+0x2c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <uart2_write+0xa>
		;

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <uart2_write+0x2c>)
 800056a:	b2db      	uxtb	r3, r3
 800056c:	6053      	str	r3, [r2, #4]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40004400 	.word	0x40004400

08000580 <uart2_init_pa3>:

	// read from transmit data register
	return USART2->DR;
}

void uart2_init_pa3(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	// configure RX/TX pins
	// 1. enable clock access to gpio A
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <uart2_init_pa3+0x8c>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000588:	4a20      	ldr	r2, [pc, #128]	@ (800060c <uart2_init_pa3+0x8c>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. set pa2 (UART_TX) mode to AF mode
	GPIOA->MODER &= ~(1U << 4);
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <uart2_init_pa3+0x90>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <uart2_init_pa3+0x90>)
 8000596:	f023 0310 	bic.w	r3, r3, #16
 800059a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <uart2_init_pa3+0x90>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <uart2_init_pa3+0x90>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6013      	str	r3, [r2, #0]

	// 3. set pa2 alternate function type to AF07
	GPIOA->AFR[0] |= (7U << 8);
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <uart2_init_pa3+0x90>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <uart2_init_pa3+0x90>)
 80005ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80005b2:	6213      	str	r3, [r2, #32]

	// 4. set pa3 (UART_RX) mode to AF mode
	GPIOA->MODER &= ~(1U << 6);
 80005b4:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <uart2_init_pa3+0x90>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <uart2_init_pa3+0x90>)
 80005ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <uart2_init_pa3+0x90>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <uart2_init_pa3+0x90>)
 80005c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ca:	6013      	str	r3, [r2, #0]

	// 5. set pa3 alternate function type to AF07
	GPIOA->AFR[0] |= (7U << 12);
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <uart2_init_pa3+0x90>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <uart2_init_pa3+0x90>)
 80005d2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80005d6:	6213      	str	r3, [r2, #32]

	// configure USART module
	// 1. enable clock access to USART2 (APB1ENR)
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <uart2_init_pa3+0x8c>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <uart2_init_pa3+0x8c>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40

	// 2. configure USART baudrate
	USART2->BRR = compute_uart_BD(APB1_CLK, UART_BAUDRATE);
 80005e4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <uart2_init_pa3+0x94>)
 80005ea:	f7ff ff9d 	bl	8000528 <compute_uart_BD>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <uart2_init_pa3+0x98>)
 80005f4:	609a      	str	r2, [r3, #8]

	// 3. enable transmitter and receiver
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE);
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <uart2_init_pa3+0x98>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	60da      	str	r2, [r3, #12]

	// 5. enable USART module
	USART2->CR1 |= USART_CR1_UE;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <uart2_init_pa3+0x98>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <uart2_init_pa3+0x98>)
 8000602:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	00f42400 	.word	0x00f42400
 8000618:	40004400 	.word	0x40004400

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	@ (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	@ (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	@ (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f8f3 	bl	8000834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fe8f 	bl	8000370 <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000660:	0800153c 	.word	0x0800153c
  ldr r2, =_sbss
 8000664:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000668:	200001cc 	.word	0x200001cc

0800066c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <std>:
 8000670:	2300      	movs	r3, #0
 8000672:	b510      	push	{r4, lr}
 8000674:	4604      	mov	r4, r0
 8000676:	e9c0 3300 	strd	r3, r3, [r0]
 800067a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800067e:	6083      	str	r3, [r0, #8]
 8000680:	8181      	strh	r1, [r0, #12]
 8000682:	6643      	str	r3, [r0, #100]	@ 0x64
 8000684:	81c2      	strh	r2, [r0, #14]
 8000686:	6183      	str	r3, [r0, #24]
 8000688:	4619      	mov	r1, r3
 800068a:	2208      	movs	r2, #8
 800068c:	305c      	adds	r0, #92	@ 0x5c
 800068e:	f000 f8c3 	bl	8000818 <memset>
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <std+0x58>)
 8000694:	6263      	str	r3, [r4, #36]	@ 0x24
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <std+0x5c>)
 8000698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <std+0x60>)
 800069c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <std+0x64>)
 80006a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <std+0x68>)
 80006a4:	6224      	str	r4, [r4, #32]
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d006      	beq.n	80006b8 <std+0x48>
 80006aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ae:	4294      	cmp	r4, r2
 80006b0:	d002      	beq.n	80006b8 <std+0x48>
 80006b2:	33d0      	adds	r3, #208	@ 0xd0
 80006b4:	429c      	cmp	r4, r3
 80006b6:	d105      	bne.n	80006c4 <std+0x54>
 80006b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c0:	f000 b8dc 	b.w	800087c <__retarget_lock_init_recursive>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	080010d5 	.word	0x080010d5
 80006cc:	080010f7 	.word	0x080010f7
 80006d0:	0800112f 	.word	0x0800112f
 80006d4:	08001153 	.word	0x08001153
 80006d8:	20000080 	.word	0x20000080

080006dc <stdio_exit_handler>:
 80006dc:	4a02      	ldr	r2, [pc, #8]	@ (80006e8 <stdio_exit_handler+0xc>)
 80006de:	4903      	ldr	r1, [pc, #12]	@ (80006ec <stdio_exit_handler+0x10>)
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <stdio_exit_handler+0x14>)
 80006e2:	f000 b869 	b.w	80007b8 <_fwalk_sglue>
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	0800106d 	.word	0x0800106d
 80006f0:	20000010 	.word	0x20000010

080006f4 <cleanup_stdio>:
 80006f4:	6841      	ldr	r1, [r0, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <cleanup_stdio+0x34>)
 80006f8:	4299      	cmp	r1, r3
 80006fa:	b510      	push	{r4, lr}
 80006fc:	4604      	mov	r4, r0
 80006fe:	d001      	beq.n	8000704 <cleanup_stdio+0x10>
 8000700:	f000 fcb4 	bl	800106c <_fflush_r>
 8000704:	68a1      	ldr	r1, [r4, #8]
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <cleanup_stdio+0x38>)
 8000708:	4299      	cmp	r1, r3
 800070a:	d002      	beq.n	8000712 <cleanup_stdio+0x1e>
 800070c:	4620      	mov	r0, r4
 800070e:	f000 fcad 	bl	800106c <_fflush_r>
 8000712:	68e1      	ldr	r1, [r4, #12]
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <cleanup_stdio+0x3c>)
 8000716:	4299      	cmp	r1, r3
 8000718:	d004      	beq.n	8000724 <cleanup_stdio+0x30>
 800071a:	4620      	mov	r0, r4
 800071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000720:	f000 bca4 	b.w	800106c <_fflush_r>
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	20000080 	.word	0x20000080
 800072c:	200000e8 	.word	0x200000e8
 8000730:	20000150 	.word	0x20000150

08000734 <global_stdio_init.part.0>:
 8000734:	b510      	push	{r4, lr}
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <global_stdio_init.part.0+0x30>)
 8000738:	4c0b      	ldr	r4, [pc, #44]	@ (8000768 <global_stdio_init.part.0+0x34>)
 800073a:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <global_stdio_init.part.0+0x38>)
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	4620      	mov	r0, r4
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	f7ff ff94 	bl	8000670 <std>
 8000748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800074c:	2201      	movs	r2, #1
 800074e:	2109      	movs	r1, #9
 8000750:	f7ff ff8e 	bl	8000670 <std>
 8000754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000758:	2202      	movs	r2, #2
 800075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800075e:	2112      	movs	r1, #18
 8000760:	f7ff bf86 	b.w	8000670 <std>
 8000764:	200001b8 	.word	0x200001b8
 8000768:	20000080 	.word	0x20000080
 800076c:	080006dd 	.word	0x080006dd

08000770 <__sfp_lock_acquire>:
 8000770:	4801      	ldr	r0, [pc, #4]	@ (8000778 <__sfp_lock_acquire+0x8>)
 8000772:	f000 b884 	b.w	800087e <__retarget_lock_acquire_recursive>
 8000776:	bf00      	nop
 8000778:	200001bd 	.word	0x200001bd

0800077c <__sfp_lock_release>:
 800077c:	4801      	ldr	r0, [pc, #4]	@ (8000784 <__sfp_lock_release+0x8>)
 800077e:	f000 b87f 	b.w	8000880 <__retarget_lock_release_recursive>
 8000782:	bf00      	nop
 8000784:	200001bd 	.word	0x200001bd

08000788 <__sinit>:
 8000788:	b510      	push	{r4, lr}
 800078a:	4604      	mov	r4, r0
 800078c:	f7ff fff0 	bl	8000770 <__sfp_lock_acquire>
 8000790:	6a23      	ldr	r3, [r4, #32]
 8000792:	b11b      	cbz	r3, 800079c <__sinit+0x14>
 8000794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000798:	f7ff bff0 	b.w	800077c <__sfp_lock_release>
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <__sinit+0x28>)
 800079e:	6223      	str	r3, [r4, #32]
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__sinit+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f5      	bne.n	8000794 <__sinit+0xc>
 80007a8:	f7ff ffc4 	bl	8000734 <global_stdio_init.part.0>
 80007ac:	e7f2      	b.n	8000794 <__sinit+0xc>
 80007ae:	bf00      	nop
 80007b0:	080006f5 	.word	0x080006f5
 80007b4:	200001b8 	.word	0x200001b8

080007b8 <_fwalk_sglue>:
 80007b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007bc:	4607      	mov	r7, r0
 80007be:	4688      	mov	r8, r1
 80007c0:	4614      	mov	r4, r2
 80007c2:	2600      	movs	r6, #0
 80007c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007c8:	f1b9 0901 	subs.w	r9, r9, #1
 80007cc:	d505      	bpl.n	80007da <_fwalk_sglue+0x22>
 80007ce:	6824      	ldr	r4, [r4, #0]
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d1f7      	bne.n	80007c4 <_fwalk_sglue+0xc>
 80007d4:	4630      	mov	r0, r6
 80007d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007da:	89ab      	ldrh	r3, [r5, #12]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d907      	bls.n	80007f0 <_fwalk_sglue+0x38>
 80007e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007e4:	3301      	adds	r3, #1
 80007e6:	d003      	beq.n	80007f0 <_fwalk_sglue+0x38>
 80007e8:	4629      	mov	r1, r5
 80007ea:	4638      	mov	r0, r7
 80007ec:	47c0      	blx	r8
 80007ee:	4306      	orrs	r6, r0
 80007f0:	3568      	adds	r5, #104	@ 0x68
 80007f2:	e7e9      	b.n	80007c8 <_fwalk_sglue+0x10>

080007f4 <iprintf>:
 80007f4:	b40f      	push	{r0, r1, r2, r3}
 80007f6:	b507      	push	{r0, r1, r2, lr}
 80007f8:	4906      	ldr	r1, [pc, #24]	@ (8000814 <iprintf+0x20>)
 80007fa:	ab04      	add	r3, sp, #16
 80007fc:	6808      	ldr	r0, [r1, #0]
 80007fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000802:	6881      	ldr	r1, [r0, #8]
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	f000 f865 	bl	80008d4 <_vfiprintf_r>
 800080a:	b003      	add	sp, #12
 800080c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr
 8000814:	2000000c 	.word	0x2000000c

08000818 <memset>:
 8000818:	4402      	add	r2, r0
 800081a:	4603      	mov	r3, r0
 800081c:	4293      	cmp	r3, r2
 800081e:	d100      	bne.n	8000822 <memset+0xa>
 8000820:	4770      	bx	lr
 8000822:	f803 1b01 	strb.w	r1, [r3], #1
 8000826:	e7f9      	b.n	800081c <memset+0x4>

08000828 <__errno>:
 8000828:	4b01      	ldr	r3, [pc, #4]	@ (8000830 <__errno+0x8>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2000000c 	.word	0x2000000c

08000834 <__libc_init_array>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	4d0d      	ldr	r5, [pc, #52]	@ (800086c <__libc_init_array+0x38>)
 8000838:	4c0d      	ldr	r4, [pc, #52]	@ (8000870 <__libc_init_array+0x3c>)
 800083a:	1b64      	subs	r4, r4, r5
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	2600      	movs	r6, #0
 8000840:	42a6      	cmp	r6, r4
 8000842:	d109      	bne.n	8000858 <__libc_init_array+0x24>
 8000844:	4d0b      	ldr	r5, [pc, #44]	@ (8000874 <__libc_init_array+0x40>)
 8000846:	4c0c      	ldr	r4, [pc, #48]	@ (8000878 <__libc_init_array+0x44>)
 8000848:	f000 fe40 	bl	80014cc <_init>
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	2600      	movs	r6, #0
 8000852:	42a6      	cmp	r6, r4
 8000854:	d105      	bne.n	8000862 <__libc_init_array+0x2e>
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f855 3b04 	ldr.w	r3, [r5], #4
 800085c:	4798      	blx	r3
 800085e:	3601      	adds	r6, #1
 8000860:	e7ee      	b.n	8000840 <__libc_init_array+0xc>
 8000862:	f855 3b04 	ldr.w	r3, [r5], #4
 8000866:	4798      	blx	r3
 8000868:	3601      	adds	r6, #1
 800086a:	e7f2      	b.n	8000852 <__libc_init_array+0x1e>
 800086c:	08001534 	.word	0x08001534
 8000870:	08001534 	.word	0x08001534
 8000874:	08001534 	.word	0x08001534
 8000878:	08001538 	.word	0x08001538

0800087c <__retarget_lock_init_recursive>:
 800087c:	4770      	bx	lr

0800087e <__retarget_lock_acquire_recursive>:
 800087e:	4770      	bx	lr

08000880 <__retarget_lock_release_recursive>:
 8000880:	4770      	bx	lr

08000882 <__sfputc_r>:
 8000882:	6893      	ldr	r3, [r2, #8]
 8000884:	3b01      	subs	r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	b410      	push	{r4}
 800088a:	6093      	str	r3, [r2, #8]
 800088c:	da08      	bge.n	80008a0 <__sfputc_r+0x1e>
 800088e:	6994      	ldr	r4, [r2, #24]
 8000890:	42a3      	cmp	r3, r4
 8000892:	db01      	blt.n	8000898 <__sfputc_r+0x16>
 8000894:	290a      	cmp	r1, #10
 8000896:	d103      	bne.n	80008a0 <__sfputc_r+0x1e>
 8000898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800089c:	f000 bc5d 	b.w	800115a <__swbuf_r>
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	1c58      	adds	r0, r3, #1
 80008a4:	6010      	str	r0, [r2, #0]
 80008a6:	7019      	strb	r1, [r3, #0]
 80008a8:	4608      	mov	r0, r1
 80008aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <__sfputs_r>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	4606      	mov	r6, r0
 80008b4:	460f      	mov	r7, r1
 80008b6:	4614      	mov	r4, r2
 80008b8:	18d5      	adds	r5, r2, r3
 80008ba:	42ac      	cmp	r4, r5
 80008bc:	d101      	bne.n	80008c2 <__sfputs_r+0x12>
 80008be:	2000      	movs	r0, #0
 80008c0:	e007      	b.n	80008d2 <__sfputs_r+0x22>
 80008c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008c6:	463a      	mov	r2, r7
 80008c8:	4630      	mov	r0, r6
 80008ca:	f7ff ffda 	bl	8000882 <__sfputc_r>
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	d1f3      	bne.n	80008ba <__sfputs_r+0xa>
 80008d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008d4 <_vfiprintf_r>:
 80008d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d8:	460d      	mov	r5, r1
 80008da:	b09d      	sub	sp, #116	@ 0x74
 80008dc:	4614      	mov	r4, r2
 80008de:	4698      	mov	r8, r3
 80008e0:	4606      	mov	r6, r0
 80008e2:	b118      	cbz	r0, 80008ec <_vfiprintf_r+0x18>
 80008e4:	6a03      	ldr	r3, [r0, #32]
 80008e6:	b90b      	cbnz	r3, 80008ec <_vfiprintf_r+0x18>
 80008e8:	f7ff ff4e 	bl	8000788 <__sinit>
 80008ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008ee:	07d9      	lsls	r1, r3, #31
 80008f0:	d405      	bmi.n	80008fe <_vfiprintf_r+0x2a>
 80008f2:	89ab      	ldrh	r3, [r5, #12]
 80008f4:	059a      	lsls	r2, r3, #22
 80008f6:	d402      	bmi.n	80008fe <_vfiprintf_r+0x2a>
 80008f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008fa:	f7ff ffc0 	bl	800087e <__retarget_lock_acquire_recursive>
 80008fe:	89ab      	ldrh	r3, [r5, #12]
 8000900:	071b      	lsls	r3, r3, #28
 8000902:	d501      	bpl.n	8000908 <_vfiprintf_r+0x34>
 8000904:	692b      	ldr	r3, [r5, #16]
 8000906:	b99b      	cbnz	r3, 8000930 <_vfiprintf_r+0x5c>
 8000908:	4629      	mov	r1, r5
 800090a:	4630      	mov	r0, r6
 800090c:	f000 fc64 	bl	80011d8 <__swsetup_r>
 8000910:	b170      	cbz	r0, 8000930 <_vfiprintf_r+0x5c>
 8000912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000914:	07dc      	lsls	r4, r3, #31
 8000916:	d504      	bpl.n	8000922 <_vfiprintf_r+0x4e>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800091c:	b01d      	add	sp, #116	@ 0x74
 800091e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000922:	89ab      	ldrh	r3, [r5, #12]
 8000924:	0598      	lsls	r0, r3, #22
 8000926:	d4f7      	bmi.n	8000918 <_vfiprintf_r+0x44>
 8000928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800092a:	f7ff ffa9 	bl	8000880 <__retarget_lock_release_recursive>
 800092e:	e7f3      	b.n	8000918 <_vfiprintf_r+0x44>
 8000930:	2300      	movs	r3, #0
 8000932:	9309      	str	r3, [sp, #36]	@ 0x24
 8000934:	2320      	movs	r3, #32
 8000936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800093a:	f8cd 800c 	str.w	r8, [sp, #12]
 800093e:	2330      	movs	r3, #48	@ 0x30
 8000940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000af0 <_vfiprintf_r+0x21c>
 8000944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000948:	f04f 0901 	mov.w	r9, #1
 800094c:	4623      	mov	r3, r4
 800094e:	469a      	mov	sl, r3
 8000950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000954:	b10a      	cbz	r2, 800095a <_vfiprintf_r+0x86>
 8000956:	2a25      	cmp	r2, #37	@ 0x25
 8000958:	d1f9      	bne.n	800094e <_vfiprintf_r+0x7a>
 800095a:	ebba 0b04 	subs.w	fp, sl, r4
 800095e:	d00b      	beq.n	8000978 <_vfiprintf_r+0xa4>
 8000960:	465b      	mov	r3, fp
 8000962:	4622      	mov	r2, r4
 8000964:	4629      	mov	r1, r5
 8000966:	4630      	mov	r0, r6
 8000968:	f7ff ffa2 	bl	80008b0 <__sfputs_r>
 800096c:	3001      	adds	r0, #1
 800096e:	f000 80a7 	beq.w	8000ac0 <_vfiprintf_r+0x1ec>
 8000972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000974:	445a      	add	r2, fp
 8000976:	9209      	str	r2, [sp, #36]	@ 0x24
 8000978:	f89a 3000 	ldrb.w	r3, [sl]
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 809f 	beq.w	8000ac0 <_vfiprintf_r+0x1ec>
 8000982:	2300      	movs	r3, #0
 8000984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800098c:	f10a 0a01 	add.w	sl, sl, #1
 8000990:	9304      	str	r3, [sp, #16]
 8000992:	9307      	str	r3, [sp, #28]
 8000994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000998:	931a      	str	r3, [sp, #104]	@ 0x68
 800099a:	4654      	mov	r4, sl
 800099c:	2205      	movs	r2, #5
 800099e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a2:	4853      	ldr	r0, [pc, #332]	@ (8000af0 <_vfiprintf_r+0x21c>)
 80009a4:	f7ff fc34 	bl	8000210 <memchr>
 80009a8:	9a04      	ldr	r2, [sp, #16]
 80009aa:	b9d8      	cbnz	r0, 80009e4 <_vfiprintf_r+0x110>
 80009ac:	06d1      	lsls	r1, r2, #27
 80009ae:	bf44      	itt	mi
 80009b0:	2320      	movmi	r3, #32
 80009b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009b6:	0713      	lsls	r3, r2, #28
 80009b8:	bf44      	itt	mi
 80009ba:	232b      	movmi	r3, #43	@ 0x2b
 80009bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009c0:	f89a 3000 	ldrb.w	r3, [sl]
 80009c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80009c6:	d015      	beq.n	80009f4 <_vfiprintf_r+0x120>
 80009c8:	9a07      	ldr	r2, [sp, #28]
 80009ca:	4654      	mov	r4, sl
 80009cc:	2000      	movs	r0, #0
 80009ce:	f04f 0c0a 	mov.w	ip, #10
 80009d2:	4621      	mov	r1, r4
 80009d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009d8:	3b30      	subs	r3, #48	@ 0x30
 80009da:	2b09      	cmp	r3, #9
 80009dc:	d94b      	bls.n	8000a76 <_vfiprintf_r+0x1a2>
 80009de:	b1b0      	cbz	r0, 8000a0e <_vfiprintf_r+0x13a>
 80009e0:	9207      	str	r2, [sp, #28]
 80009e2:	e014      	b.n	8000a0e <_vfiprintf_r+0x13a>
 80009e4:	eba0 0308 	sub.w	r3, r0, r8
 80009e8:	fa09 f303 	lsl.w	r3, r9, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	9304      	str	r3, [sp, #16]
 80009f0:	46a2      	mov	sl, r4
 80009f2:	e7d2      	b.n	800099a <_vfiprintf_r+0xc6>
 80009f4:	9b03      	ldr	r3, [sp, #12]
 80009f6:	1d19      	adds	r1, r3, #4
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	9103      	str	r1, [sp, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bfbb      	ittet	lt
 8000a00:	425b      	neglt	r3, r3
 8000a02:	f042 0202 	orrlt.w	r2, r2, #2
 8000a06:	9307      	strge	r3, [sp, #28]
 8000a08:	9307      	strlt	r3, [sp, #28]
 8000a0a:	bfb8      	it	lt
 8000a0c:	9204      	strlt	r2, [sp, #16]
 8000a0e:	7823      	ldrb	r3, [r4, #0]
 8000a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a12:	d10a      	bne.n	8000a2a <_vfiprintf_r+0x156>
 8000a14:	7863      	ldrb	r3, [r4, #1]
 8000a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a18:	d132      	bne.n	8000a80 <_vfiprintf_r+0x1ac>
 8000a1a:	9b03      	ldr	r3, [sp, #12]
 8000a1c:	1d1a      	adds	r2, r3, #4
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	9203      	str	r2, [sp, #12]
 8000a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a26:	3402      	adds	r4, #2
 8000a28:	9305      	str	r3, [sp, #20]
 8000a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b00 <_vfiprintf_r+0x22c>
 8000a2e:	7821      	ldrb	r1, [r4, #0]
 8000a30:	2203      	movs	r2, #3
 8000a32:	4650      	mov	r0, sl
 8000a34:	f7ff fbec 	bl	8000210 <memchr>
 8000a38:	b138      	cbz	r0, 8000a4a <_vfiprintf_r+0x176>
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	eba0 000a 	sub.w	r0, r0, sl
 8000a40:	2240      	movs	r2, #64	@ 0x40
 8000a42:	4082      	lsls	r2, r0
 8000a44:	4313      	orrs	r3, r2
 8000a46:	3401      	adds	r4, #1
 8000a48:	9304      	str	r3, [sp, #16]
 8000a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a4e:	4829      	ldr	r0, [pc, #164]	@ (8000af4 <_vfiprintf_r+0x220>)
 8000a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a54:	2206      	movs	r2, #6
 8000a56:	f7ff fbdb 	bl	8000210 <memchr>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d03f      	beq.n	8000ade <_vfiprintf_r+0x20a>
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <_vfiprintf_r+0x224>)
 8000a60:	bb1b      	cbnz	r3, 8000aaa <_vfiprintf_r+0x1d6>
 8000a62:	9b03      	ldr	r3, [sp, #12]
 8000a64:	3307      	adds	r3, #7
 8000a66:	f023 0307 	bic.w	r3, r3, #7
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	9303      	str	r3, [sp, #12]
 8000a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a70:	443b      	add	r3, r7
 8000a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a74:	e76a      	b.n	800094c <_vfiprintf_r+0x78>
 8000a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	e7a8      	b.n	80009d2 <_vfiprintf_r+0xfe>
 8000a80:	2300      	movs	r3, #0
 8000a82:	3401      	adds	r4, #1
 8000a84:	9305      	str	r3, [sp, #20]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 0c0a 	mov.w	ip, #10
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a92:	3a30      	subs	r2, #48	@ 0x30
 8000a94:	2a09      	cmp	r2, #9
 8000a96:	d903      	bls.n	8000aa0 <_vfiprintf_r+0x1cc>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0c6      	beq.n	8000a2a <_vfiprintf_r+0x156>
 8000a9c:	9105      	str	r1, [sp, #20]
 8000a9e:	e7c4      	b.n	8000a2a <_vfiprintf_r+0x156>
 8000aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e7f0      	b.n	8000a8c <_vfiprintf_r+0x1b8>
 8000aaa:	ab03      	add	r3, sp, #12
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	462a      	mov	r2, r5
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <_vfiprintf_r+0x228>)
 8000ab2:	a904      	add	r1, sp, #16
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4607      	mov	r7, r0
 8000abc:	1c78      	adds	r0, r7, #1
 8000abe:	d1d6      	bne.n	8000a6e <_vfiprintf_r+0x19a>
 8000ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ac2:	07d9      	lsls	r1, r3, #31
 8000ac4:	d405      	bmi.n	8000ad2 <_vfiprintf_r+0x1fe>
 8000ac6:	89ab      	ldrh	r3, [r5, #12]
 8000ac8:	059a      	lsls	r2, r3, #22
 8000aca:	d402      	bmi.n	8000ad2 <_vfiprintf_r+0x1fe>
 8000acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ace:	f7ff fed7 	bl	8000880 <__retarget_lock_release_recursive>
 8000ad2:	89ab      	ldrh	r3, [r5, #12]
 8000ad4:	065b      	lsls	r3, r3, #25
 8000ad6:	f53f af1f 	bmi.w	8000918 <_vfiprintf_r+0x44>
 8000ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000adc:	e71e      	b.n	800091c <_vfiprintf_r+0x48>
 8000ade:	ab03      	add	r3, sp, #12
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <_vfiprintf_r+0x228>)
 8000ae6:	a904      	add	r1, sp, #16
 8000ae8:	4630      	mov	r0, r6
 8000aea:	f000 f91b 	bl	8000d24 <_printf_i>
 8000aee:	e7e4      	b.n	8000aba <_vfiprintf_r+0x1e6>
 8000af0:	080014f8 	.word	0x080014f8
 8000af4:	08001502 	.word	0x08001502
 8000af8:	00000000 	.word	0x00000000
 8000afc:	080008b1 	.word	0x080008b1
 8000b00:	080014fe 	.word	0x080014fe

08000b04 <sbrk_aligned>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4e0f      	ldr	r6, [pc, #60]	@ (8000b44 <sbrk_aligned+0x40>)
 8000b08:	460c      	mov	r4, r1
 8000b0a:	6831      	ldr	r1, [r6, #0]
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	b911      	cbnz	r1, 8000b16 <sbrk_aligned+0x12>
 8000b10:	f000 fc70 	bl	80013f4 <_sbrk_r>
 8000b14:	6030      	str	r0, [r6, #0]
 8000b16:	4621      	mov	r1, r4
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 fc6b 	bl	80013f4 <_sbrk_r>
 8000b1e:	1c43      	adds	r3, r0, #1
 8000b20:	d103      	bne.n	8000b2a <sbrk_aligned+0x26>
 8000b22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	1cc4      	adds	r4, r0, #3
 8000b2c:	f024 0403 	bic.w	r4, r4, #3
 8000b30:	42a0      	cmp	r0, r4
 8000b32:	d0f8      	beq.n	8000b26 <sbrk_aligned+0x22>
 8000b34:	1a21      	subs	r1, r4, r0
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 fc5c 	bl	80013f4 <_sbrk_r>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	d1f2      	bne.n	8000b26 <sbrk_aligned+0x22>
 8000b40:	e7ef      	b.n	8000b22 <sbrk_aligned+0x1e>
 8000b42:	bf00      	nop
 8000b44:	200001c0 	.word	0x200001c0

08000b48 <_malloc_r>:
 8000b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b4c:	1ccd      	adds	r5, r1, #3
 8000b4e:	f025 0503 	bic.w	r5, r5, #3
 8000b52:	3508      	adds	r5, #8
 8000b54:	2d0c      	cmp	r5, #12
 8000b56:	bf38      	it	cc
 8000b58:	250c      	movcc	r5, #12
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	db01      	blt.n	8000b64 <_malloc_r+0x1c>
 8000b60:	42a9      	cmp	r1, r5
 8000b62:	d904      	bls.n	8000b6e <_malloc_r+0x26>
 8000b64:	230c      	movs	r3, #12
 8000b66:	6033      	str	r3, [r6, #0]
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c44 <_malloc_r+0xfc>
 8000b72:	f000 faa3 	bl	80010bc <__malloc_lock>
 8000b76:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	bb44      	cbnz	r4, 8000bd0 <_malloc_r+0x88>
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4630      	mov	r0, r6
 8000b82:	f7ff ffbf 	bl	8000b04 <sbrk_aligned>
 8000b86:	1c43      	adds	r3, r0, #1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	d158      	bne.n	8000c3e <_malloc_r+0xf6>
 8000b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b90:	4627      	mov	r7, r4
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d143      	bne.n	8000c1e <_malloc_r+0xd6>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d04b      	beq.n	8000c32 <_malloc_r+0xea>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	eb04 0903 	add.w	r9, r4, r3
 8000ba4:	f000 fc26 	bl	80013f4 <_sbrk_r>
 8000ba8:	4581      	cmp	r9, r0
 8000baa:	d142      	bne.n	8000c32 <_malloc_r+0xea>
 8000bac:	6821      	ldr	r1, [r4, #0]
 8000bae:	1a6d      	subs	r5, r5, r1
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f7ff ffa6 	bl	8000b04 <sbrk_aligned>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d03a      	beq.n	8000c32 <_malloc_r+0xea>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	442b      	add	r3, r5
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	bb62      	cbnz	r2, 8000c24 <_malloc_r+0xdc>
 8000bca:	f8c8 7000 	str.w	r7, [r8]
 8000bce:	e00f      	b.n	8000bf0 <_malloc_r+0xa8>
 8000bd0:	6822      	ldr	r2, [r4, #0]
 8000bd2:	1b52      	subs	r2, r2, r5
 8000bd4:	d420      	bmi.n	8000c18 <_malloc_r+0xd0>
 8000bd6:	2a0b      	cmp	r2, #11
 8000bd8:	d917      	bls.n	8000c0a <_malloc_r+0xc2>
 8000bda:	1961      	adds	r1, r4, r5
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	6025      	str	r5, [r4, #0]
 8000be0:	bf18      	it	ne
 8000be2:	6059      	strne	r1, [r3, #4]
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	bf08      	it	eq
 8000be8:	f8c8 1000 	streq.w	r1, [r8]
 8000bec:	5162      	str	r2, [r4, r5]
 8000bee:	604b      	str	r3, [r1, #4]
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 fa69 	bl	80010c8 <__malloc_unlock>
 8000bf6:	f104 000b 	add.w	r0, r4, #11
 8000bfa:	1d23      	adds	r3, r4, #4
 8000bfc:	f020 0007 	bic.w	r0, r0, #7
 8000c00:	1ac2      	subs	r2, r0, r3
 8000c02:	bf1c      	itt	ne
 8000c04:	1a1b      	subne	r3, r3, r0
 8000c06:	50a3      	strne	r3, [r4, r2]
 8000c08:	e7af      	b.n	8000b6a <_malloc_r+0x22>
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	bf0c      	ite	eq
 8000c10:	f8c8 2000 	streq.w	r2, [r8]
 8000c14:	605a      	strne	r2, [r3, #4]
 8000c16:	e7eb      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c18:	4623      	mov	r3, r4
 8000c1a:	6864      	ldr	r4, [r4, #4]
 8000c1c:	e7ae      	b.n	8000b7c <_malloc_r+0x34>
 8000c1e:	463c      	mov	r4, r7
 8000c20:	687f      	ldr	r7, [r7, #4]
 8000c22:	e7b6      	b.n	8000b92 <_malloc_r+0x4a>
 8000c24:	461a      	mov	r2, r3
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	d1fb      	bne.n	8000c24 <_malloc_r+0xdc>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6053      	str	r3, [r2, #4]
 8000c30:	e7de      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c32:	230c      	movs	r3, #12
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	4630      	mov	r0, r6
 8000c38:	f000 fa46 	bl	80010c8 <__malloc_unlock>
 8000c3c:	e794      	b.n	8000b68 <_malloc_r+0x20>
 8000c3e:	6005      	str	r5, [r0, #0]
 8000c40:	e7d6      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c42:	bf00      	nop
 8000c44:	200001c4 	.word	0x200001c4

08000c48 <_printf_common>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	4616      	mov	r6, r2
 8000c4e:	4698      	mov	r8, r3
 8000c50:	688a      	ldr	r2, [r1, #8]
 8000c52:	690b      	ldr	r3, [r1, #16]
 8000c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	bfb8      	it	lt
 8000c5c:	4613      	movlt	r3, r2
 8000c5e:	6033      	str	r3, [r6, #0]
 8000c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c64:	4607      	mov	r7, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	b10a      	cbz	r2, 8000c6e <_printf_common+0x26>
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	6033      	str	r3, [r6, #0]
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	0699      	lsls	r1, r3, #26
 8000c72:	bf42      	ittt	mi
 8000c74:	6833      	ldrmi	r3, [r6, #0]
 8000c76:	3302      	addmi	r3, #2
 8000c78:	6033      	strmi	r3, [r6, #0]
 8000c7a:	6825      	ldr	r5, [r4, #0]
 8000c7c:	f015 0506 	ands.w	r5, r5, #6
 8000c80:	d106      	bne.n	8000c90 <_printf_common+0x48>
 8000c82:	f104 0a19 	add.w	sl, r4, #25
 8000c86:	68e3      	ldr	r3, [r4, #12]
 8000c88:	6832      	ldr	r2, [r6, #0]
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	dc26      	bgt.n	8000cde <_printf_common+0x96>
 8000c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c94:	6822      	ldr	r2, [r4, #0]
 8000c96:	3b00      	subs	r3, #0
 8000c98:	bf18      	it	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	0692      	lsls	r2, r2, #26
 8000c9e:	d42b      	bmi.n	8000cf8 <_printf_common+0xb0>
 8000ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ca4:	4641      	mov	r1, r8
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	47c8      	blx	r9
 8000caa:	3001      	adds	r0, #1
 8000cac:	d01e      	beq.n	8000cec <_printf_common+0xa4>
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	6922      	ldr	r2, [r4, #16]
 8000cb2:	f003 0306 	and.w	r3, r3, #6
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf02      	ittt	eq
 8000cba:	68e5      	ldreq	r5, [r4, #12]
 8000cbc:	6833      	ldreq	r3, [r6, #0]
 8000cbe:	1aed      	subeq	r5, r5, r3
 8000cc0:	68a3      	ldr	r3, [r4, #8]
 8000cc2:	bf0c      	ite	eq
 8000cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cc8:	2500      	movne	r5, #0
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	bfc4      	itt	gt
 8000cce:	1a9b      	subgt	r3, r3, r2
 8000cd0:	18ed      	addgt	r5, r5, r3
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	341a      	adds	r4, #26
 8000cd6:	42b5      	cmp	r5, r6
 8000cd8:	d11a      	bne.n	8000d10 <_printf_common+0xc8>
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e008      	b.n	8000cf0 <_printf_common+0xa8>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	47c8      	blx	r9
 8000ce8:	3001      	adds	r0, #1
 8000cea:	d103      	bne.n	8000cf4 <_printf_common+0xac>
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	3501      	adds	r5, #1
 8000cf6:	e7c6      	b.n	8000c86 <_printf_common+0x3e>
 8000cf8:	18e1      	adds	r1, r4, r3
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	2030      	movs	r0, #48	@ 0x30
 8000cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d02:	4422      	add	r2, r4
 8000d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	e7c7      	b.n	8000ca0 <_printf_common+0x58>
 8000d10:	2301      	movs	r3, #1
 8000d12:	4622      	mov	r2, r4
 8000d14:	4641      	mov	r1, r8
 8000d16:	4638      	mov	r0, r7
 8000d18:	47c8      	blx	r9
 8000d1a:	3001      	adds	r0, #1
 8000d1c:	d0e6      	beq.n	8000cec <_printf_common+0xa4>
 8000d1e:	3601      	adds	r6, #1
 8000d20:	e7d9      	b.n	8000cd6 <_printf_common+0x8e>
	...

08000d24 <_printf_i>:
 8000d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	7e0f      	ldrb	r7, [r1, #24]
 8000d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d2c:	2f78      	cmp	r7, #120	@ 0x78
 8000d2e:	4691      	mov	r9, r2
 8000d30:	4680      	mov	r8, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	469a      	mov	sl, r3
 8000d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d3a:	d807      	bhi.n	8000d4c <_printf_i+0x28>
 8000d3c:	2f62      	cmp	r7, #98	@ 0x62
 8000d3e:	d80a      	bhi.n	8000d56 <_printf_i+0x32>
 8000d40:	2f00      	cmp	r7, #0
 8000d42:	f000 80d2 	beq.w	8000eea <_printf_i+0x1c6>
 8000d46:	2f58      	cmp	r7, #88	@ 0x58
 8000d48:	f000 80b9 	beq.w	8000ebe <_printf_i+0x19a>
 8000d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d54:	e03a      	b.n	8000dcc <_printf_i+0xa8>
 8000d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d5a:	2b15      	cmp	r3, #21
 8000d5c:	d8f6      	bhi.n	8000d4c <_printf_i+0x28>
 8000d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d64 <_printf_i+0x40>)
 8000d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d64:	08000dbd 	.word	0x08000dbd
 8000d68:	08000dd1 	.word	0x08000dd1
 8000d6c:	08000d4d 	.word	0x08000d4d
 8000d70:	08000d4d 	.word	0x08000d4d
 8000d74:	08000d4d 	.word	0x08000d4d
 8000d78:	08000d4d 	.word	0x08000d4d
 8000d7c:	08000dd1 	.word	0x08000dd1
 8000d80:	08000d4d 	.word	0x08000d4d
 8000d84:	08000d4d 	.word	0x08000d4d
 8000d88:	08000d4d 	.word	0x08000d4d
 8000d8c:	08000d4d 	.word	0x08000d4d
 8000d90:	08000ed1 	.word	0x08000ed1
 8000d94:	08000dfb 	.word	0x08000dfb
 8000d98:	08000e8b 	.word	0x08000e8b
 8000d9c:	08000d4d 	.word	0x08000d4d
 8000da0:	08000d4d 	.word	0x08000d4d
 8000da4:	08000ef3 	.word	0x08000ef3
 8000da8:	08000d4d 	.word	0x08000d4d
 8000dac:	08000dfb 	.word	0x08000dfb
 8000db0:	08000d4d 	.word	0x08000d4d
 8000db4:	08000d4d 	.word	0x08000d4d
 8000db8:	08000e93 	.word	0x08000e93
 8000dbc:	6833      	ldr	r3, [r6, #0]
 8000dbe:	1d1a      	adds	r2, r3, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6032      	str	r2, [r6, #0]
 8000dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e09d      	b.n	8000f0c <_printf_i+0x1e8>
 8000dd0:	6833      	ldr	r3, [r6, #0]
 8000dd2:	6820      	ldr	r0, [r4, #0]
 8000dd4:	1d19      	adds	r1, r3, #4
 8000dd6:	6031      	str	r1, [r6, #0]
 8000dd8:	0606      	lsls	r6, r0, #24
 8000dda:	d501      	bpl.n	8000de0 <_printf_i+0xbc>
 8000ddc:	681d      	ldr	r5, [r3, #0]
 8000dde:	e003      	b.n	8000de8 <_printf_i+0xc4>
 8000de0:	0645      	lsls	r5, r0, #25
 8000de2:	d5fb      	bpl.n	8000ddc <_printf_i+0xb8>
 8000de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	da03      	bge.n	8000df4 <_printf_i+0xd0>
 8000dec:	232d      	movs	r3, #45	@ 0x2d
 8000dee:	426d      	negs	r5, r5
 8000df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000df4:	4859      	ldr	r0, [pc, #356]	@ (8000f5c <_printf_i+0x238>)
 8000df6:	230a      	movs	r3, #10
 8000df8:	e011      	b.n	8000e1e <_printf_i+0xfa>
 8000dfa:	6821      	ldr	r1, [r4, #0]
 8000dfc:	6833      	ldr	r3, [r6, #0]
 8000dfe:	0608      	lsls	r0, r1, #24
 8000e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e04:	d402      	bmi.n	8000e0c <_printf_i+0xe8>
 8000e06:	0649      	lsls	r1, r1, #25
 8000e08:	bf48      	it	mi
 8000e0a:	b2ad      	uxthmi	r5, r5
 8000e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e0e:	4853      	ldr	r0, [pc, #332]	@ (8000f5c <_printf_i+0x238>)
 8000e10:	6033      	str	r3, [r6, #0]
 8000e12:	bf14      	ite	ne
 8000e14:	230a      	movne	r3, #10
 8000e16:	2308      	moveq	r3, #8
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e1e:	6866      	ldr	r6, [r4, #4]
 8000e20:	60a6      	str	r6, [r4, #8]
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	bfa2      	ittt	ge
 8000e26:	6821      	ldrge	r1, [r4, #0]
 8000e28:	f021 0104 	bicge.w	r1, r1, #4
 8000e2c:	6021      	strge	r1, [r4, #0]
 8000e2e:	b90d      	cbnz	r5, 8000e34 <_printf_i+0x110>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d04b      	beq.n	8000ecc <_printf_i+0x1a8>
 8000e34:	4616      	mov	r6, r2
 8000e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e3e:	5dc7      	ldrb	r7, [r0, r7]
 8000e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e44:	462f      	mov	r7, r5
 8000e46:	42bb      	cmp	r3, r7
 8000e48:	460d      	mov	r5, r1
 8000e4a:	d9f4      	bls.n	8000e36 <_printf_i+0x112>
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d10b      	bne.n	8000e68 <_printf_i+0x144>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	07df      	lsls	r7, r3, #31
 8000e54:	d508      	bpl.n	8000e68 <_printf_i+0x144>
 8000e56:	6923      	ldr	r3, [r4, #16]
 8000e58:	6861      	ldr	r1, [r4, #4]
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	bfde      	ittt	le
 8000e5e:	2330      	movle	r3, #48	@ 0x30
 8000e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e68:	1b92      	subs	r2, r2, r6
 8000e6a:	6122      	str	r2, [r4, #16]
 8000e6c:	f8cd a000 	str.w	sl, [sp]
 8000e70:	464b      	mov	r3, r9
 8000e72:	aa03      	add	r2, sp, #12
 8000e74:	4621      	mov	r1, r4
 8000e76:	4640      	mov	r0, r8
 8000e78:	f7ff fee6 	bl	8000c48 <_printf_common>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d14a      	bne.n	8000f16 <_printf_i+0x1f2>
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e84:	b004      	add	sp, #16
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	4833      	ldr	r0, [pc, #204]	@ (8000f60 <_printf_i+0x23c>)
 8000e94:	2778      	movs	r7, #120	@ 0x78
 8000e96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	6831      	ldr	r1, [r6, #0]
 8000e9e:	061f      	lsls	r7, r3, #24
 8000ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ea4:	d402      	bmi.n	8000eac <_printf_i+0x188>
 8000ea6:	065f      	lsls	r7, r3, #25
 8000ea8:	bf48      	it	mi
 8000eaa:	b2ad      	uxthmi	r5, r5
 8000eac:	6031      	str	r1, [r6, #0]
 8000eae:	07d9      	lsls	r1, r3, #31
 8000eb0:	bf44      	itt	mi
 8000eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8000eb6:	6023      	strmi	r3, [r4, #0]
 8000eb8:	b11d      	cbz	r5, 8000ec2 <_printf_i+0x19e>
 8000eba:	2310      	movs	r3, #16
 8000ebc:	e7ac      	b.n	8000e18 <_printf_i+0xf4>
 8000ebe:	4827      	ldr	r0, [pc, #156]	@ (8000f5c <_printf_i+0x238>)
 8000ec0:	e7e9      	b.n	8000e96 <_printf_i+0x172>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f023 0320 	bic.w	r3, r3, #32
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	e7f6      	b.n	8000eba <_printf_i+0x196>
 8000ecc:	4616      	mov	r6, r2
 8000ece:	e7bd      	b.n	8000e4c <_printf_i+0x128>
 8000ed0:	6833      	ldr	r3, [r6, #0]
 8000ed2:	6825      	ldr	r5, [r4, #0]
 8000ed4:	6961      	ldr	r1, [r4, #20]
 8000ed6:	1d18      	adds	r0, r3, #4
 8000ed8:	6030      	str	r0, [r6, #0]
 8000eda:	062e      	lsls	r6, r5, #24
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	d501      	bpl.n	8000ee4 <_printf_i+0x1c0>
 8000ee0:	6019      	str	r1, [r3, #0]
 8000ee2:	e002      	b.n	8000eea <_printf_i+0x1c6>
 8000ee4:	0668      	lsls	r0, r5, #25
 8000ee6:	d5fb      	bpl.n	8000ee0 <_printf_i+0x1bc>
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	6123      	str	r3, [r4, #16]
 8000eee:	4616      	mov	r6, r2
 8000ef0:	e7bc      	b.n	8000e6c <_printf_i+0x148>
 8000ef2:	6833      	ldr	r3, [r6, #0]
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	6032      	str	r2, [r6, #0]
 8000ef8:	681e      	ldr	r6, [r3, #0]
 8000efa:	6862      	ldr	r2, [r4, #4]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4630      	mov	r0, r6
 8000f00:	f7ff f986 	bl	8000210 <memchr>
 8000f04:	b108      	cbz	r0, 8000f0a <_printf_i+0x1e6>
 8000f06:	1b80      	subs	r0, r0, r6
 8000f08:	6060      	str	r0, [r4, #4]
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	6123      	str	r3, [r4, #16]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f14:	e7aa      	b.n	8000e6c <_printf_i+0x148>
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	4632      	mov	r2, r6
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	47d0      	blx	sl
 8000f20:	3001      	adds	r0, #1
 8000f22:	d0ad      	beq.n	8000e80 <_printf_i+0x15c>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	079b      	lsls	r3, r3, #30
 8000f28:	d413      	bmi.n	8000f52 <_printf_i+0x22e>
 8000f2a:	68e0      	ldr	r0, [r4, #12]
 8000f2c:	9b03      	ldr	r3, [sp, #12]
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	bfb8      	it	lt
 8000f32:	4618      	movlt	r0, r3
 8000f34:	e7a6      	b.n	8000e84 <_printf_i+0x160>
 8000f36:	2301      	movs	r3, #1
 8000f38:	4632      	mov	r2, r6
 8000f3a:	4649      	mov	r1, r9
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	47d0      	blx	sl
 8000f40:	3001      	adds	r0, #1
 8000f42:	d09d      	beq.n	8000e80 <_printf_i+0x15c>
 8000f44:	3501      	adds	r5, #1
 8000f46:	68e3      	ldr	r3, [r4, #12]
 8000f48:	9903      	ldr	r1, [sp, #12]
 8000f4a:	1a5b      	subs	r3, r3, r1
 8000f4c:	42ab      	cmp	r3, r5
 8000f4e:	dcf2      	bgt.n	8000f36 <_printf_i+0x212>
 8000f50:	e7eb      	b.n	8000f2a <_printf_i+0x206>
 8000f52:	2500      	movs	r5, #0
 8000f54:	f104 0619 	add.w	r6, r4, #25
 8000f58:	e7f5      	b.n	8000f46 <_printf_i+0x222>
 8000f5a:	bf00      	nop
 8000f5c:	08001509 	.word	0x08001509
 8000f60:	0800151a 	.word	0x0800151a

08000f64 <__sflush_r>:
 8000f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6c:	0716      	lsls	r6, r2, #28
 8000f6e:	4605      	mov	r5, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	d454      	bmi.n	800101e <__sflush_r+0xba>
 8000f74:	684b      	ldr	r3, [r1, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dc02      	bgt.n	8000f80 <__sflush_r+0x1c>
 8000f7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dd48      	ble.n	8001012 <__sflush_r+0xae>
 8000f80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d045      	beq.n	8001012 <__sflush_r+0xae>
 8000f86:	2300      	movs	r3, #0
 8000f88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f8c:	682f      	ldr	r7, [r5, #0]
 8000f8e:	6a21      	ldr	r1, [r4, #32]
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	d030      	beq.n	8000ff6 <__sflush_r+0x92>
 8000f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f96:	89a3      	ldrh	r3, [r4, #12]
 8000f98:	0759      	lsls	r1, r3, #29
 8000f9a:	d505      	bpl.n	8000fa8 <__sflush_r+0x44>
 8000f9c:	6863      	ldr	r3, [r4, #4]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000fa2:	b10b      	cbz	r3, 8000fa8 <__sflush_r+0x44>
 8000fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fa6:	1ad2      	subs	r2, r2, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fac:	6a21      	ldr	r1, [r4, #32]
 8000fae:	4628      	mov	r0, r5
 8000fb0:	47b0      	blx	r6
 8000fb2:	1c43      	adds	r3, r0, #1
 8000fb4:	89a3      	ldrh	r3, [r4, #12]
 8000fb6:	d106      	bne.n	8000fc6 <__sflush_r+0x62>
 8000fb8:	6829      	ldr	r1, [r5, #0]
 8000fba:	291d      	cmp	r1, #29
 8000fbc:	d82b      	bhi.n	8001016 <__sflush_r+0xb2>
 8000fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001068 <__sflush_r+0x104>)
 8000fc0:	410a      	asrs	r2, r1
 8000fc2:	07d6      	lsls	r6, r2, #31
 8000fc4:	d427      	bmi.n	8001016 <__sflush_r+0xb2>
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6062      	str	r2, [r4, #4]
 8000fca:	04d9      	lsls	r1, r3, #19
 8000fcc:	6922      	ldr	r2, [r4, #16]
 8000fce:	6022      	str	r2, [r4, #0]
 8000fd0:	d504      	bpl.n	8000fdc <__sflush_r+0x78>
 8000fd2:	1c42      	adds	r2, r0, #1
 8000fd4:	d101      	bne.n	8000fda <__sflush_r+0x76>
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	b903      	cbnz	r3, 8000fdc <__sflush_r+0x78>
 8000fda:	6560      	str	r0, [r4, #84]	@ 0x54
 8000fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fde:	602f      	str	r7, [r5, #0]
 8000fe0:	b1b9      	cbz	r1, 8001012 <__sflush_r+0xae>
 8000fe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fe6:	4299      	cmp	r1, r3
 8000fe8:	d002      	beq.n	8000ff0 <__sflush_r+0x8c>
 8000fea:	4628      	mov	r0, r5
 8000fec:	f000 fa24 	bl	8001438 <_free_r>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ff4:	e00d      	b.n	8001012 <__sflush_r+0xae>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	47b0      	blx	r6
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	1c50      	adds	r0, r2, #1
 8001000:	d1c9      	bne.n	8000f96 <__sflush_r+0x32>
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0c6      	beq.n	8000f96 <__sflush_r+0x32>
 8001008:	2b1d      	cmp	r3, #29
 800100a:	d001      	beq.n	8001010 <__sflush_r+0xac>
 800100c:	2b16      	cmp	r3, #22
 800100e:	d11e      	bne.n	800104e <__sflush_r+0xea>
 8001010:	602f      	str	r7, [r5, #0]
 8001012:	2000      	movs	r0, #0
 8001014:	e022      	b.n	800105c <__sflush_r+0xf8>
 8001016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101a:	b21b      	sxth	r3, r3
 800101c:	e01b      	b.n	8001056 <__sflush_r+0xf2>
 800101e:	690f      	ldr	r7, [r1, #16]
 8001020:	2f00      	cmp	r7, #0
 8001022:	d0f6      	beq.n	8001012 <__sflush_r+0xae>
 8001024:	0793      	lsls	r3, r2, #30
 8001026:	680e      	ldr	r6, [r1, #0]
 8001028:	bf08      	it	eq
 800102a:	694b      	ldreq	r3, [r1, #20]
 800102c:	600f      	str	r7, [r1, #0]
 800102e:	bf18      	it	ne
 8001030:	2300      	movne	r3, #0
 8001032:	eba6 0807 	sub.w	r8, r6, r7
 8001036:	608b      	str	r3, [r1, #8]
 8001038:	f1b8 0f00 	cmp.w	r8, #0
 800103c:	dde9      	ble.n	8001012 <__sflush_r+0xae>
 800103e:	6a21      	ldr	r1, [r4, #32]
 8001040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001042:	4643      	mov	r3, r8
 8001044:	463a      	mov	r2, r7
 8001046:	4628      	mov	r0, r5
 8001048:	47b0      	blx	r6
 800104a:	2800      	cmp	r0, #0
 800104c:	dc08      	bgt.n	8001060 <__sflush_r+0xfc>
 800104e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001056:	81a3      	strh	r3, [r4, #12]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001060:	4407      	add	r7, r0
 8001062:	eba8 0800 	sub.w	r8, r8, r0
 8001066:	e7e7      	b.n	8001038 <__sflush_r+0xd4>
 8001068:	dfbffffe 	.word	0xdfbffffe

0800106c <_fflush_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	690b      	ldr	r3, [r1, #16]
 8001070:	4605      	mov	r5, r0
 8001072:	460c      	mov	r4, r1
 8001074:	b913      	cbnz	r3, 800107c <_fflush_r+0x10>
 8001076:	2500      	movs	r5, #0
 8001078:	4628      	mov	r0, r5
 800107a:	bd38      	pop	{r3, r4, r5, pc}
 800107c:	b118      	cbz	r0, 8001086 <_fflush_r+0x1a>
 800107e:	6a03      	ldr	r3, [r0, #32]
 8001080:	b90b      	cbnz	r3, 8001086 <_fflush_r+0x1a>
 8001082:	f7ff fb81 	bl	8000788 <__sinit>
 8001086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f3      	beq.n	8001076 <_fflush_r+0xa>
 800108e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001090:	07d0      	lsls	r0, r2, #31
 8001092:	d404      	bmi.n	800109e <_fflush_r+0x32>
 8001094:	0599      	lsls	r1, r3, #22
 8001096:	d402      	bmi.n	800109e <_fflush_r+0x32>
 8001098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800109a:	f7ff fbf0 	bl	800087e <__retarget_lock_acquire_recursive>
 800109e:	4628      	mov	r0, r5
 80010a0:	4621      	mov	r1, r4
 80010a2:	f7ff ff5f 	bl	8000f64 <__sflush_r>
 80010a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010a8:	07da      	lsls	r2, r3, #31
 80010aa:	4605      	mov	r5, r0
 80010ac:	d4e4      	bmi.n	8001078 <_fflush_r+0xc>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	059b      	lsls	r3, r3, #22
 80010b2:	d4e1      	bmi.n	8001078 <_fflush_r+0xc>
 80010b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010b6:	f7ff fbe3 	bl	8000880 <__retarget_lock_release_recursive>
 80010ba:	e7dd      	b.n	8001078 <_fflush_r+0xc>

080010bc <__malloc_lock>:
 80010bc:	4801      	ldr	r0, [pc, #4]	@ (80010c4 <__malloc_lock+0x8>)
 80010be:	f7ff bbde 	b.w	800087e <__retarget_lock_acquire_recursive>
 80010c2:	bf00      	nop
 80010c4:	200001bc 	.word	0x200001bc

080010c8 <__malloc_unlock>:
 80010c8:	4801      	ldr	r0, [pc, #4]	@ (80010d0 <__malloc_unlock+0x8>)
 80010ca:	f7ff bbd9 	b.w	8000880 <__retarget_lock_release_recursive>
 80010ce:	bf00      	nop
 80010d0:	200001bc 	.word	0x200001bc

080010d4 <__sread>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	460c      	mov	r4, r1
 80010d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010dc:	f000 f978 	bl	80013d0 <_read_r>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	bfab      	itete	ge
 80010e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010e6:	89a3      	ldrhlt	r3, [r4, #12]
 80010e8:	181b      	addge	r3, r3, r0
 80010ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010ee:	bfac      	ite	ge
 80010f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010f2:	81a3      	strhlt	r3, [r4, #12]
 80010f4:	bd10      	pop	{r4, pc}

080010f6 <__swrite>:
 80010f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010fa:	461f      	mov	r7, r3
 80010fc:	898b      	ldrh	r3, [r1, #12]
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	4605      	mov	r5, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4616      	mov	r6, r2
 8001106:	d505      	bpl.n	8001114 <__swrite+0x1e>
 8001108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110c:	2302      	movs	r3, #2
 800110e:	2200      	movs	r2, #0
 8001110:	f000 f94c 	bl	80013ac <_lseek_r>
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800111a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800111e:	81a3      	strh	r3, [r4, #12]
 8001120:	4632      	mov	r2, r6
 8001122:	463b      	mov	r3, r7
 8001124:	4628      	mov	r0, r5
 8001126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	f000 b973 	b.w	8001414 <_write_r>

0800112e <__sseek>:
 800112e:	b510      	push	{r4, lr}
 8001130:	460c      	mov	r4, r1
 8001132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001136:	f000 f939 	bl	80013ac <_lseek_r>
 800113a:	1c43      	adds	r3, r0, #1
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	bf15      	itete	ne
 8001140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800114a:	81a3      	strheq	r3, [r4, #12]
 800114c:	bf18      	it	ne
 800114e:	81a3      	strhne	r3, [r4, #12]
 8001150:	bd10      	pop	{r4, pc}

08001152 <__sclose>:
 8001152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001156:	f000 b8f7 	b.w	8001348 <_close_r>

0800115a <__swbuf_r>:
 800115a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115c:	460e      	mov	r6, r1
 800115e:	4614      	mov	r4, r2
 8001160:	4605      	mov	r5, r0
 8001162:	b118      	cbz	r0, 800116c <__swbuf_r+0x12>
 8001164:	6a03      	ldr	r3, [r0, #32]
 8001166:	b90b      	cbnz	r3, 800116c <__swbuf_r+0x12>
 8001168:	f7ff fb0e 	bl	8000788 <__sinit>
 800116c:	69a3      	ldr	r3, [r4, #24]
 800116e:	60a3      	str	r3, [r4, #8]
 8001170:	89a3      	ldrh	r3, [r4, #12]
 8001172:	071a      	lsls	r2, r3, #28
 8001174:	d501      	bpl.n	800117a <__swbuf_r+0x20>
 8001176:	6923      	ldr	r3, [r4, #16]
 8001178:	b943      	cbnz	r3, 800118c <__swbuf_r+0x32>
 800117a:	4621      	mov	r1, r4
 800117c:	4628      	mov	r0, r5
 800117e:	f000 f82b 	bl	80011d8 <__swsetup_r>
 8001182:	b118      	cbz	r0, 800118c <__swbuf_r+0x32>
 8001184:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001188:	4638      	mov	r0, r7
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	1a98      	subs	r0, r3, r2
 8001192:	6963      	ldr	r3, [r4, #20]
 8001194:	b2f6      	uxtb	r6, r6
 8001196:	4283      	cmp	r3, r0
 8001198:	4637      	mov	r7, r6
 800119a:	dc05      	bgt.n	80011a8 <__swbuf_r+0x4e>
 800119c:	4621      	mov	r1, r4
 800119e:	4628      	mov	r0, r5
 80011a0:	f7ff ff64 	bl	800106c <_fflush_r>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d1ed      	bne.n	8001184 <__swbuf_r+0x2a>
 80011a8:	68a3      	ldr	r3, [r4, #8]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	6022      	str	r2, [r4, #0]
 80011b4:	701e      	strb	r6, [r3, #0]
 80011b6:	6962      	ldr	r2, [r4, #20]
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d004      	beq.n	80011c8 <__swbuf_r+0x6e>
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	07db      	lsls	r3, r3, #31
 80011c2:	d5e1      	bpl.n	8001188 <__swbuf_r+0x2e>
 80011c4:	2e0a      	cmp	r6, #10
 80011c6:	d1df      	bne.n	8001188 <__swbuf_r+0x2e>
 80011c8:	4621      	mov	r1, r4
 80011ca:	4628      	mov	r0, r5
 80011cc:	f7ff ff4e 	bl	800106c <_fflush_r>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d0d9      	beq.n	8001188 <__swbuf_r+0x2e>
 80011d4:	e7d6      	b.n	8001184 <__swbuf_r+0x2a>
	...

080011d8 <__swsetup_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <__swsetup_r+0xa8>)
 80011dc:	4605      	mov	r5, r0
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	460c      	mov	r4, r1
 80011e2:	b118      	cbz	r0, 80011ec <__swsetup_r+0x14>
 80011e4:	6a03      	ldr	r3, [r0, #32]
 80011e6:	b90b      	cbnz	r3, 80011ec <__swsetup_r+0x14>
 80011e8:	f7ff face 	bl	8000788 <__sinit>
 80011ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f0:	0719      	lsls	r1, r3, #28
 80011f2:	d422      	bmi.n	800123a <__swsetup_r+0x62>
 80011f4:	06da      	lsls	r2, r3, #27
 80011f6:	d407      	bmi.n	8001208 <__swsetup_r+0x30>
 80011f8:	2209      	movs	r2, #9
 80011fa:	602a      	str	r2, [r5, #0]
 80011fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001200:	81a3      	strh	r3, [r4, #12]
 8001202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001206:	e033      	b.n	8001270 <__swsetup_r+0x98>
 8001208:	0758      	lsls	r0, r3, #29
 800120a:	d512      	bpl.n	8001232 <__swsetup_r+0x5a>
 800120c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800120e:	b141      	cbz	r1, 8001222 <__swsetup_r+0x4a>
 8001210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001214:	4299      	cmp	r1, r3
 8001216:	d002      	beq.n	800121e <__swsetup_r+0x46>
 8001218:	4628      	mov	r0, r5
 800121a:	f000 f90d 	bl	8001438 <_free_r>
 800121e:	2300      	movs	r3, #0
 8001220:	6363      	str	r3, [r4, #52]	@ 0x34
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001228:	81a3      	strh	r3, [r4, #12]
 800122a:	2300      	movs	r3, #0
 800122c:	6063      	str	r3, [r4, #4]
 800122e:	6923      	ldr	r3, [r4, #16]
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	81a3      	strh	r3, [r4, #12]
 800123a:	6923      	ldr	r3, [r4, #16]
 800123c:	b94b      	cbnz	r3, 8001252 <__swsetup_r+0x7a>
 800123e:	89a3      	ldrh	r3, [r4, #12]
 8001240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001248:	d003      	beq.n	8001252 <__swsetup_r+0x7a>
 800124a:	4621      	mov	r1, r4
 800124c:	4628      	mov	r0, r5
 800124e:	f000 f83f 	bl	80012d0 <__smakebuf_r>
 8001252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001256:	f013 0201 	ands.w	r2, r3, #1
 800125a:	d00a      	beq.n	8001272 <__swsetup_r+0x9a>
 800125c:	2200      	movs	r2, #0
 800125e:	60a2      	str	r2, [r4, #8]
 8001260:	6962      	ldr	r2, [r4, #20]
 8001262:	4252      	negs	r2, r2
 8001264:	61a2      	str	r2, [r4, #24]
 8001266:	6922      	ldr	r2, [r4, #16]
 8001268:	b942      	cbnz	r2, 800127c <__swsetup_r+0xa4>
 800126a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800126e:	d1c5      	bne.n	80011fc <__swsetup_r+0x24>
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	0799      	lsls	r1, r3, #30
 8001274:	bf58      	it	pl
 8001276:	6962      	ldrpl	r2, [r4, #20]
 8001278:	60a2      	str	r2, [r4, #8]
 800127a:	e7f4      	b.n	8001266 <__swsetup_r+0x8e>
 800127c:	2000      	movs	r0, #0
 800127e:	e7f7      	b.n	8001270 <__swsetup_r+0x98>
 8001280:	2000000c 	.word	0x2000000c

08001284 <__swhatbuf_r>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	460c      	mov	r4, r1
 8001288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800128c:	2900      	cmp	r1, #0
 800128e:	b096      	sub	sp, #88	@ 0x58
 8001290:	4615      	mov	r5, r2
 8001292:	461e      	mov	r6, r3
 8001294:	da0d      	bge.n	80012b2 <__swhatbuf_r+0x2e>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800129c:	f04f 0100 	mov.w	r1, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2340      	movne	r3, #64	@ 0x40
 80012a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012a8:	2000      	movs	r0, #0
 80012aa:	6031      	str	r1, [r6, #0]
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	b016      	add	sp, #88	@ 0x58
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	466a      	mov	r2, sp
 80012b4:	f000 f858 	bl	8001368 <_fstat_r>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	dbec      	blt.n	8001296 <__swhatbuf_r+0x12>
 80012bc:	9901      	ldr	r1, [sp, #4]
 80012be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012c6:	4259      	negs	r1, r3
 80012c8:	4159      	adcs	r1, r3
 80012ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ce:	e7eb      	b.n	80012a8 <__swhatbuf_r+0x24>

080012d0 <__smakebuf_r>:
 80012d0:	898b      	ldrh	r3, [r1, #12]
 80012d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012d4:	079d      	lsls	r5, r3, #30
 80012d6:	4606      	mov	r6, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	d507      	bpl.n	80012ec <__smakebuf_r+0x1c>
 80012dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	6123      	str	r3, [r4, #16]
 80012e4:	2301      	movs	r3, #1
 80012e6:	6163      	str	r3, [r4, #20]
 80012e8:	b003      	add	sp, #12
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ec:	ab01      	add	r3, sp, #4
 80012ee:	466a      	mov	r2, sp
 80012f0:	f7ff ffc8 	bl	8001284 <__swhatbuf_r>
 80012f4:	9f00      	ldr	r7, [sp, #0]
 80012f6:	4605      	mov	r5, r0
 80012f8:	4639      	mov	r1, r7
 80012fa:	4630      	mov	r0, r6
 80012fc:	f7ff fc24 	bl	8000b48 <_malloc_r>
 8001300:	b948      	cbnz	r0, 8001316 <__smakebuf_r+0x46>
 8001302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001306:	059a      	lsls	r2, r3, #22
 8001308:	d4ee      	bmi.n	80012e8 <__smakebuf_r+0x18>
 800130a:	f023 0303 	bic.w	r3, r3, #3
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	81a3      	strh	r3, [r4, #12]
 8001314:	e7e2      	b.n	80012dc <__smakebuf_r+0xc>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	6020      	str	r0, [r4, #0]
 800131a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131e:	81a3      	strh	r3, [r4, #12]
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001326:	b15b      	cbz	r3, 8001340 <__smakebuf_r+0x70>
 8001328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800132c:	4630      	mov	r0, r6
 800132e:	f000 f82d 	bl	800138c <_isatty_r>
 8001332:	b128      	cbz	r0, 8001340 <__smakebuf_r+0x70>
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	f023 0303 	bic.w	r3, r3, #3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	81a3      	strh	r3, [r4, #12]
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	431d      	orrs	r5, r3
 8001344:	81a5      	strh	r5, [r4, #12]
 8001346:	e7cf      	b.n	80012e8 <__smakebuf_r+0x18>

08001348 <_close_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d06      	ldr	r5, [pc, #24]	@ (8001364 <_close_r+0x1c>)
 800134c:	2300      	movs	r3, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	f7ff f871 	bl	800043a <_close>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_close_r+0x1a>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_close_r+0x1a>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200001c8 	.word	0x200001c8

08001368 <_fstat_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d07      	ldr	r5, [pc, #28]	@ (8001388 <_fstat_r+0x20>)
 800136c:	2300      	movs	r3, #0
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	4611      	mov	r1, r2
 8001374:	602b      	str	r3, [r5, #0]
 8001376:	f7ff f86c 	bl	8000452 <_fstat>
 800137a:	1c43      	adds	r3, r0, #1
 800137c:	d102      	bne.n	8001384 <_fstat_r+0x1c>
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	b103      	cbz	r3, 8001384 <_fstat_r+0x1c>
 8001382:	6023      	str	r3, [r4, #0]
 8001384:	bd38      	pop	{r3, r4, r5, pc}
 8001386:	bf00      	nop
 8001388:	200001c8 	.word	0x200001c8

0800138c <_isatty_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4d06      	ldr	r5, [pc, #24]	@ (80013a8 <_isatty_r+0x1c>)
 8001390:	2300      	movs	r3, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	602b      	str	r3, [r5, #0]
 8001398:	f7ff f86b 	bl	8000472 <_isatty>
 800139c:	1c43      	adds	r3, r0, #1
 800139e:	d102      	bne.n	80013a6 <_isatty_r+0x1a>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	b103      	cbz	r3, 80013a6 <_isatty_r+0x1a>
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	200001c8 	.word	0x200001c8

080013ac <_lseek_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	4d07      	ldr	r5, [pc, #28]	@ (80013cc <_lseek_r+0x20>)
 80013b0:	4604      	mov	r4, r0
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	602a      	str	r2, [r5, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f7ff f864 	bl	8000488 <_lseek>
 80013c0:	1c43      	adds	r3, r0, #1
 80013c2:	d102      	bne.n	80013ca <_lseek_r+0x1e>
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	b103      	cbz	r3, 80013ca <_lseek_r+0x1e>
 80013c8:	6023      	str	r3, [r4, #0]
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	200001c8 	.word	0x200001c8

080013d0 <_read_r>:
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4d07      	ldr	r5, [pc, #28]	@ (80013f0 <_read_r+0x20>)
 80013d4:	4604      	mov	r4, r0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	2200      	movs	r2, #0
 80013dc:	602a      	str	r2, [r5, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	f7fe fff2 	bl	80003c8 <_read>
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	d102      	bne.n	80013ee <_read_r+0x1e>
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	b103      	cbz	r3, 80013ee <_read_r+0x1e>
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	200001c8 	.word	0x200001c8

080013f4 <_sbrk_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4d06      	ldr	r5, [pc, #24]	@ (8001410 <_sbrk_r+0x1c>)
 80013f8:	2300      	movs	r3, #0
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	602b      	str	r3, [r5, #0]
 8001400:	f7ff f850 	bl	80004a4 <_sbrk>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	d102      	bne.n	800140e <_sbrk_r+0x1a>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b103      	cbz	r3, 800140e <_sbrk_r+0x1a>
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	200001c8 	.word	0x200001c8

08001414 <_write_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4d07      	ldr	r5, [pc, #28]	@ (8001434 <_write_r+0x20>)
 8001418:	4604      	mov	r4, r0
 800141a:	4608      	mov	r0, r1
 800141c:	4611      	mov	r1, r2
 800141e:	2200      	movs	r2, #0
 8001420:	602a      	str	r2, [r5, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	f7fe ffed 	bl	8000402 <_write>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_write_r+0x1e>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_write_r+0x1e>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	200001c8 	.word	0x200001c8

08001438 <_free_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4605      	mov	r5, r0
 800143c:	2900      	cmp	r1, #0
 800143e:	d041      	beq.n	80014c4 <_free_r+0x8c>
 8001440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001444:	1f0c      	subs	r4, r1, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	bfb8      	it	lt
 800144a:	18e4      	addlt	r4, r4, r3
 800144c:	f7ff fe36 	bl	80010bc <__malloc_lock>
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <_free_r+0x90>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	b933      	cbnz	r3, 8001464 <_free_r+0x2c>
 8001456:	6063      	str	r3, [r4, #4]
 8001458:	6014      	str	r4, [r2, #0]
 800145a:	4628      	mov	r0, r5
 800145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001460:	f7ff be32 	b.w	80010c8 <__malloc_unlock>
 8001464:	42a3      	cmp	r3, r4
 8001466:	d908      	bls.n	800147a <_free_r+0x42>
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	1821      	adds	r1, r4, r0
 800146c:	428b      	cmp	r3, r1
 800146e:	bf01      	itttt	eq
 8001470:	6819      	ldreq	r1, [r3, #0]
 8001472:	685b      	ldreq	r3, [r3, #4]
 8001474:	1809      	addeq	r1, r1, r0
 8001476:	6021      	streq	r1, [r4, #0]
 8001478:	e7ed      	b.n	8001456 <_free_r+0x1e>
 800147a:	461a      	mov	r2, r3
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	b10b      	cbz	r3, 8001484 <_free_r+0x4c>
 8001480:	42a3      	cmp	r3, r4
 8001482:	d9fa      	bls.n	800147a <_free_r+0x42>
 8001484:	6811      	ldr	r1, [r2, #0]
 8001486:	1850      	adds	r0, r2, r1
 8001488:	42a0      	cmp	r0, r4
 800148a:	d10b      	bne.n	80014a4 <_free_r+0x6c>
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	4401      	add	r1, r0
 8001490:	1850      	adds	r0, r2, r1
 8001492:	4283      	cmp	r3, r0
 8001494:	6011      	str	r1, [r2, #0]
 8001496:	d1e0      	bne.n	800145a <_free_r+0x22>
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	6053      	str	r3, [r2, #4]
 800149e:	4408      	add	r0, r1
 80014a0:	6010      	str	r0, [r2, #0]
 80014a2:	e7da      	b.n	800145a <_free_r+0x22>
 80014a4:	d902      	bls.n	80014ac <_free_r+0x74>
 80014a6:	230c      	movs	r3, #12
 80014a8:	602b      	str	r3, [r5, #0]
 80014aa:	e7d6      	b.n	800145a <_free_r+0x22>
 80014ac:	6820      	ldr	r0, [r4, #0]
 80014ae:	1821      	adds	r1, r4, r0
 80014b0:	428b      	cmp	r3, r1
 80014b2:	bf04      	itt	eq
 80014b4:	6819      	ldreq	r1, [r3, #0]
 80014b6:	685b      	ldreq	r3, [r3, #4]
 80014b8:	6063      	str	r3, [r4, #4]
 80014ba:	bf04      	itt	eq
 80014bc:	1809      	addeq	r1, r1, r0
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	6054      	str	r4, [r2, #4]
 80014c2:	e7ca      	b.n	800145a <_free_r+0x22>
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
 80014c6:	bf00      	nop
 80014c8:	200001c4 	.word	0x200001c4

080014cc <_init>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr

080014d8 <_fini>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr
